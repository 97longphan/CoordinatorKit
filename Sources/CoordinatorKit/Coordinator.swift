//
//  Coordinator.swift
//  CoordinatorKitExample
//
//  Created by LONGPHAN on 27/6/25.
//

import Foundation
import UIKit

/// Protocol d√†nh cho nh·ªØng Coordinator qu·∫£n l√Ω nhi·ªÅu child,
/// nh∆∞ng t·∫°i m·ªôt th·ªùi ƒëi·ªÉm ch·ªâ c√≥ duy nh·∫•t m·ªôt child ƒë∆∞·ª£c hi·ªÉn th·ªã (active/visible).
///
/// V√≠ d·ª•:
/// - `TabbarCoordinator` ‚Üí child active l√† tab ƒëang ƒë∆∞·ª£c ch·ªçn
/// - `PageCoordinator` ‚Üí child active l√† page ƒëang hi·ªÉn th·ªã
///
/// C√°c Coordinator b√¨nh th∆∞·ªùng (push flow, modal flow) KH√îNG c·∫ßn implement protocol n√†y.
/// Ch·ªâ implement khi c√≥ kh√°i ni·ªám "m·ªôt child ƒëang hi·ªÉn th·ªã duy nh·∫•t".
public protocol ActiveChildCoordinator: Coordinator {
    var activeChildCoordinator: Coordinator? { get }
}

public protocol Coordinator: AnyObject {
    var parentCoordinator: Coordinator? { get set }
    var children: [Coordinator] { get set }
    
    func start()
    func childDidFinish(_ child: Coordinator)
}

extension Coordinator {
    public func childDidFinish(_ child: Coordinator) {
        print("üßπ [Coordinator] Removed child: \(type(of: child))")
        children.removeAll { $0 === child }
    }
}

extension Coordinator {
    public func printCoordinatorTree(level: Int = 0) {
        let indent = String(repeating: "  ", count: level)
        
        if let routerCoordinator = self as? RouterCoordinator {
            let routerType = type(of: routerCoordinator.router)
            
            let styleDescription: String
            switch routerCoordinator.presentationStyle {
            case .push:
                styleDescription = "push"
            case .present(let modalStyle):
                styleDescription = "modal(\(modalStyle))"
            }
            
            print("\(indent)üìç \(type(of: self)) üì¶ Router: \(routerType) [\(styleDescription)]")
        } else {
            print("\(indent)üìç \(type(of: self))")
        }
        
        for child in children {
            child.printCoordinatorTree(level: level + 1)
        }
    }
}

extension Coordinator {
    /// L·∫•y coordinator s√¢u nh·∫•t trong c√¢y hi·ªán t·∫°i.
    /// - N·∫øu coordinator h·ªó tr·ª£ ch·ª©a tab (v√≠ d·ª• TabbarCoordinator), s·∫Ω ƒëi v√†o tab ƒëang ƒë∆∞·ª£c ch·ªçn.
    /// - N·∫øu kh√¥ng, ƒë·ªá quy xu·ªëng coordinator con cu·ªëi c√πng (children.last).
    public func findCoordinator<T: Coordinator>(as type: T.Type) -> T? {
        if let match = self as? T {
            return match
        }
        for child in children {
            if let found = child.findCoordinator(as: type) {
                return found
            }
        }
        return nil
    }
    
    /// Coordinator s√¢u nh·∫•t (deepest) ƒëang hi·ªÉn th·ªã trong c√¢y coordinator.
    ///
    /// - N·∫øu `self` conform `ActiveChildCoordinator` (v√≠ d·ª• `TabbarCoordinator`, `PageCoordinator`),
    ///   th√¨ ti·∫øp t·ª•c ƒë·ªá quy xu·ªëng `activeChildCoordinator`.
    /// - N·∫øu kh√¥ng, ti·∫øp t·ª•c ƒë·ªá quy xu·ªëng `children.last` (coordinator con ƒë∆∞·ª£c push/present sau c√πng).
    /// - N·∫øu kh√¥ng c√≥ child ph√π h·ª£p, tr·∫£ v·ªÅ ch√≠nh `self`.
    ///
    /// D√πng ƒë·ªÉ x√°c ƒë·ªãnh coordinator hi·ªán t·∫°i ƒëang hi·ªÉn th·ªã cu·ªëi c√πng (visible nh·∫•t),
    /// b·∫•t k·ªÉ ƒë√≥ l√† flow b√¨nh th∆∞·ªùng hay container coordinator nh∆∞ tabbar.
    public var deepestVisibleCoordinator: Coordinator {
        if let active = self as? ActiveChildCoordinator {
            return active.activeChildCoordinator?.deepestVisibleCoordinator ?? self
        } else {
            return children.last?.deepestVisibleCoordinator ?? self
        }
    }
    
    /// Tr·∫£ v·ªÅ RouterCoordinator s√¢u nh·∫•t ƒëang hi·ªÉn th·ªã.
    /// N·∫øu deepest kh√¥ng ph·∫£i RouterCoordinator th√¨ leo ng∆∞·ª£c l√™n cho t·ªõi khi g·∫∑p RouterCoordinator.
    public var deepestVisibleRouterCoordinator: RouterCoordinator? {
        var current: Coordinator? = deepestVisibleCoordinator
        while let coor = current {
            if let routerCoor = coor as? RouterCoordinator {
                return routerCoor
            }
            current = coor.parentCoordinator
        }
        return nil
    }
}
